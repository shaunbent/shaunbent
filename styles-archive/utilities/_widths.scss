/*------------------------------------*\
    # WIDTH
\*------------------------------------*/

/**
 * Generates a series of utility classes that give a fluid width to
 * whichever element they’re applied, e.g.:
 *
 *   <img src="" alt="" class="u-1/2" />
 *
 * These classes are most commonly used in conjunction with our layout system,
 * e.g.:
 *
 *   <div class="o-layout__item  u-1/2">
 *
 * Also generate responsive variants of each of these
 * classes by using your Sass MQ configuration, e.g.:
 *
 *   <div class="o-layout__item  u-1/1  u-1/2@m  u-1/3@l">
 *
 * Offset classes allow you to push and pull elements left and
 * right by a specified amount, e.g.:
 *
 *   <div class="o-layout__item  u-2/3  u-pull-1/3">
 *
 * This is useful for making very granular changes to the rendered order of
 * items in a layout.
 */





// Which fractions would you like in your grid system(s)? By default, inuitcss
// provides you fractions of one whole, halves, thirds, quarters and fifths,
// e.g.:
//
//   .u-1/2
//   .u-2/5
//   .u-3/4
//   .u-2/3

$width-fractions: 1 2 3 4 5 !default;





// A mixin to spit out our width classes. Pass in the columns we want the widths
// to have, and an optional suffix for responsive widths. E.g. to create thirds
// and quarters for a small breakpoint:
//
// @include widths(3 4, -sm);

@mixin widths($columns, $breakpoint: null) {

  // Loop through the number of columns for each denominator of our fractions.
  @each $denominator in $columns {

    // Begin creating a numerator for our fraction up until we hit the
    // denominator.
    @for $numerator from 1 through $denominator {

      // Build a class in the format `.u-3/4[@<breakpoint>]`.
      .u-#{$numerator}\/#{$denominator}#{$breakpoint} {
        width: ($numerator / $denominator) * 100% !important;
      }

      /**
       * 1. Defensively reset any leftover or conflicting `left`/`right` values.
       */

      // Build a class in the format `.u-push-1/2[@<breakpoint>]`.
      .u-push-#{$numerator}\/#{$denominator}#{$breakpoint} {
        position: relative;
        right: auto; /* [1] */
        left: ($numerator / $denominator) * 100% !important;
      }

      // Build a class in the format `.u-pull-5/6[@<breakpoint>]`.
      .u-pull-#{$numerator}\/#{$denominator}#{$breakpoint} {
        position: relative;
        right: ($numerator / $denominator) * 100% !important;
        left: auto; /* [1] */
      }

    }

  }

}




/**
 * A series of width helper classes that you can use to size things like grid
 * systems. Classes take a fraction-like format (e.g. `.u-2/3`). Use these in
 * your markup:
 *
 * <div class="u-7/12">
 *
 * The following will generate widths helper classes based on the fractions
 * defined in the `$glue-width-fractions` list.
 */

@include widths($width-fractions);




/**
 * If we’re using Sass-MQ, automatically generate grid system(s) for each of our
 * defined breakpoints, and give them a Responsive Suffix, e.g.:
 *
 * <div class="u-3/12@mobile">
 */

@if (variable-exists(mq-breakpoints)) {

  @each $breakpoint in $glue-breakpoint-names {
    @include mq($from: '#{$glue-breakpoint-namespace}#{$breakpoint}') {
      @include widths($width-fractions, \@#{$breakpoint});
    }
  }

}
